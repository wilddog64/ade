#!/bin/bash

#set -e

# getScriptDir is a bash function that return the current execution script
# directory.  The script # will also follow the symlink to find out the
# correct directory.  It takes no parameters.
function getScriptDir() {
    unset CDPATH               # so this script won't be affect by CDPATH variable
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

}

SCRIPT_HOME=$(dirname $(getScriptDir $0))

cd $SCRIPT_HOME

SCRIPT_BIN=$SCRIPT_HOME/bin

echo $(pwd)

# loading various libraries
source $SCRIPT_BIN/console.sh
source $SCRIPT_BIN/bootstrap.sh
source $SCRIPT_BIN/lib.sh
source $SCRIPT_BIN/install_rbenv.sh
source $SCRIPT_BIN/install_homebrew.sh
source $SCRIPT_BIN/install_brewcask.sh
source $SCRIPT_BIN/install_ruby.sh

# setup correct path
PATH=/usr/local/bin:~/.linuxbrew/bin:$PATH

# install all our perks
function install_all() {

    install_rbenv
    install_ruby '1.9.3-p547'
    rbenv_rehash

    echo "generating config files:"

    # remove generated files
    clean
    # create new configs from templates
    thor dev:env
    ok

    if [[ -r ${SCRIPT_BIN}/install_brews.sh ]]; then
        source "${SCRIPT_BIN}/install_brews.sh"
        install_brews
    fi

    if [[ -r ${SCRIPT_BIN}/install_casks.sh ]]; then
        source "${SCRIPT_BIN}/install_casks.sh"
        install_casks
    fi

    if [[ -r ${SCRIPT_BIN}/install_vagrant_plugins.sh ]]; then
        source "${SCRIPT_BIN}/install_vagrant_plugins.sh"
        install_vagrant_plugins
    fi

    if [[ -r ${SCRIPT_BIN}/install_gems.sh ]]; then
        source "${SCRIPT_BIN}/install_gems.sh"
        install_gems
    fi

    if [[ -r ${SCRIPT_BIN}/install_npms.sh ]]; then
        source "${SCRIPT_BIN}/install_npms.sh"
        install_npms
    fi

    rbenv rehash
}

case "$1" in
    init)
        init_devenv
        ;;
    purge)
        purge
        ;;
    start)
        vagrant up
        ;;
    reload)
        reload_devenv
        ;;
    recreate)
        recreate
        ;;
    update)
        git pull
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh update"
        ;;
    upgrade-brew)
        upgrade_brews
        ;;
    *)
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh $1"
        ;;
esac

cd - > /dev/null
