#!/bin/bash

#set -e

# vagrant up

source ./bin/lib.sh
source ./bin/install_homebrew.sh
source ./bin/install_brewcask.sh
source ./bin/install_ruby.sh

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

cd $SCRIPT_HOME/..

SCRIPT_BIN=$SCRIPT_HOME/bin

function clean() {
    rm -rf Vagrantfile
    rm -rf ./bin/install_vagrant_plugins.sh
}

function init_devenv() {

    bot "Hi. I'm going to initialize your development environment. My changes are idempotent so you can run './bin/dev init' again if you hit an issue. Please report any issues to https://github.disney.com/DTSS/ADE/issues"

    local reload=$1

    platform=`uname`
    running "checking OS compatibility"
    if [[ "$platform" == "Darwin" ]]; then
        ok
        # source host/portal_osx.sh
        install_homebrew
        install_brewcask
    elif [[ "$platform" == "cygwin" ]]; then
        error "This setup is not yet tested on cygwin. Please pull request updates!"
    else
        error "Sorry, your environment is unsupported. Please order a macbook :)"
        exit -1
    fi


    require_cask vagrant
    install_all_rubygems
    install_ruby '1.9.3-p547'
    rbenv_rehash

    echo "generating config files:"
    # remove generated files
    clean
    # create new configs from templates
    thor devenv:vagrant
    ok

    source ./bin/install_vagrant_plugins.sh
    install_vagrant_plugins

    source ./bin/install_brews.sh
    install_brews

}

function purge() {
    vagrant destroy > /dev/null 2>&1
    clean
    brew cask uninstall vagrant > /dev/null 2>&1
    gem uninstall bundle > /dev/null 2>&1
    brew uninstall rbenv > /dev/null 2>&1
    bot "all clear. We can now run './bin/dev init' again to spin up anew."
    read -r -p "Would you like me to run 'init' for you now? [Y|n] " response

    if [[ $response =~ ^(no|n|N) ]];then
        exit 0
    else
        vagrant destroy -f
        init_devenv
    fi
}

function reload_devenv() {
    export RELOAD=1
    clean
    thor devenv:vagrant
    vagrant reload
    vagrant provision
}

function recreate() {
    clean
    thor devenv:vagrant
    vagrant destroy -f
    vagrant up
}


case "$1" in
    init)
        init_devenv
        ;;
    purge)
        purge
        ;;
    start)
        vagrant up
        ;;
    reload)
        reload_devenv
        ;;
    recreate)
        recreate
        ;;
    update)
        git pull
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh update"
        ;;
    *)
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh $1"
        ;;
esac

cd - > /dev/null
