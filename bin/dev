#!/bin/bash

#set -e

# getScriptDir is a bash function that return the current execution script
# directory.  The script # will also follow the symlink to find out the
# correct directory.  It takes no parameters.
function getScriptDir() {
    unset CDPATH               # so this script won't be affect by CDPATH variable
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$(readlink "$SOURCE")"
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    echo "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

}

SCRIPT_HOME=$(dirname $(getScriptDir $0))

cd $SCRIPT_HOME

SCRIPT_BIN=$SCRIPT_HOME/bin

echo $(pwd)
source $SCRIPT_BIN/console.sh
source $SCRIPT_BIN/bootstrap.sh
source $SCRIPT_BIN/lib.sh
source $SCRIPT_BIN/install_rbenv.sh
source $SCRIPT_BIN/install_homebrew.sh
source $SCRIPT_BIN/install_brewcask.sh
source $SCRIPT_BIN/install_ruby.sh

PATH=/usr/local/bin:~/.linuxbrew/bin:$PATH

function install_all() {

    install_rbenv
    install_ruby '1.9.3-p547'
    rbenv_rehash

    echo "generating config files:"

    # remove generated files
    clean
    # create new configs from templates
    thor dev:env
    ok

    source $SCRIPT_BIN/install_brews.sh
    install_brews

    source $SCRIPT_BIN/install_casks.sh
    install_casks

    source $SCRIPT_BIN/install_vagrant_plugins.sh
    install_vagrant_plugins

    source $SCRIPT_BIN/install_gems.sh
    install_gems

    source $SCRIPT_BIN/install_npms.sh
    install_npms



    rbenv rehash
}

function clean() {
    cleanup_untrack_bin_files
}

function init_devenv() {

    bot "Hi. I'm going to initialize your development environment. My changes are idempotent so you can run './bin/dev init' again if you hit an issue. Please report any issues to https://github.com/wilddog64/ade/issues"

    local reload=$1

    install_homebrew
    install_brewcask
    install_nodejs
    install_all

}

function purge() {
    vagrant destroy > /dev/null 2>&1
    clean
    brew cask uninstall vagrant > /dev/null 2>&1
    gem uninstall bundle > /dev/null 2>&1
    brew uninstall rbenv > /dev/null 2>&1
    bot "all clear. We can now run './bin/dev init' again to spin up anew."
    read -r -p "Would you like me to run 'init' for you now? [Y|n] " response

    if [[ $response =~ ^(no|n|N) ]];then
        exit 0
    else
        vagrant destroy -f
        init_devenv
    fi
}

function reload_devenv() {
    export RELOAD=1
    clean
    thor devenv:vagrant
    vagrant reload
    vagrant provision
}

function recreate() {
    clean
    thor devenv:vagrant
    vagrant destroy -f
    vagrant up
}

function install_nodejs() {
    require_brew node
}

case "$1" in
    init)
        init_devenv
        ;;
    purge)
        purge
        ;;
    start)
        vagrant up
        ;;
    reload)
        reload_devenv
        ;;
    recreate)
        recreate
        ;;
    update)
        git pull
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh update"
        ;;
    *)
        vagrant ssh -c "sudo /vagrant/bin/devenv-inner.sh $1"
        ;;
esac

cd - > /dev/null
